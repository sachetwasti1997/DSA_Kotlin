class Solution {
  fun totalFruit(fruits: IntArray): Int {
    val bask = HashMap<Int, Int>()
    var left = 0
    var right = 0
    val total = 0
    val curr = 0
    while (left < fruits.size && right < fruits.size) {
      if (fruits[right] !in bask && bask.size < 2) {
        bask[fruits[left]] = 1
        right ++
      }
      else if (fruits[right] in bask && bask.size <= 2) {
        bask[fruits[right]]?.let{
          bask[fruits[right]] += 1
        }
        right ++
      }else if (fruits[right] !in bask && bask.size == 2) {
        for ((k, v) in bask) {
          curr += v
        }
        total = total.coerseAtLeast(curr)
        left++
        right = left
      }
    }
    return total
  }
}
