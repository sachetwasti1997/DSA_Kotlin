class Solution {
  fun numsSameConsecDiff(n: Int, k: Int): IntArray {
    if (n == 1) return intArrayOf(1,2,3,4,5,6,7,8,9)
    val q = LinkedList<Int>()
    for (i in 1 .. 9) q.add(i)
    var cnt = 1
    while (!q.isEmpty()) {
      val tmp = q.poll()
      cnt++
      val lst_dgt = tmp % 10
      var newNum = -1
      if (lst_dgt + k < 10) newNum = lst_dgt + k
      else if (lst_dgt - k >= 0) newNum = lst_dgt - k
      q.add(tmp * 10 + newNum)
      if (cnt == n) break
    }
    val res =  IntArray(q.size)
    var i = 0
    while (!q.isEmpty()) res[i++] = q.poll()
    return res
  }
}
